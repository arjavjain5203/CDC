#include <unordered_set>
#include <vector>
using namespace std;

class Solution {
public:
    /*
    🔹 Approach:
    - Use an unordered_set to store all elements of the first array (nums1).
    - Iterate over the second array (nums2):
        - If an element exists in the set, add it to the result vector.
        - Remove it from the set to avoid duplicates in the result.
    - This gives the intersection of two arrays without duplicates.

    ⚙️ Time Complexity: O(n + m), where n = nums1.size(), m = nums2.size()
    ⚙️ Space Complexity: O(n) for storing nums1 elements in the unordered_set
    */

    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> st(nums1.begin(), nums1.end());  // Store elements of nums1
        vector<int> result;

        for (int num : nums2) {
            if (st.find(num) != st.end()) {
                result.push_back(num);
                st.erase(num);  // Avoid duplicates in result
            }
        }

        return result;
    }
};
