/*
-----------------------------------------------------------------
✅ Problem:
Given an N x N matrix, rotate it by 90 degrees clockwise **in-place**.

-----------------------------------------------------------------
✅ Approach:
The rotation can be achieved in **two main steps**:

1️⃣ **Transpose the matrix**
   - Swap elements across the main diagonal.
   - i.e., matrix[i][j] ↔ matrix[j][i] for all i < j.

   Example:
   [1 2 3]       [1 4 7]
   [4 5 6]  -->  [2 5 8]
   [7 8 9]       [3 6 9]

2️⃣ **Reverse each row**
   - After transposing, reversing each row gives the 90° rotation.

   Example:
   [1 4 7]       [7 4 1]
   [2 5 8]  -->  [8 5 2]
   [3 6 9]       [9 6 3]

-----------------------------------------------------------------
✅ Code:
*/

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();

        // Step 1: Transpose the matrix
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        // Step 2: Reverse each row
        for (int i = 0; i < n; i++) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

-----------------------------------------------------------------
✅ Example:
Input:
matrix = [
  [1,2,3],
  [4,5,6],
  [7,8,9]
]

Output:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]

-----------------------------------------------------------------
✅ Time Complexity:  O(N²)
   - Both transpose and row reversal involve visiting each element once.
✅ Space Complexity: O(1)
   - The operation is done **in-place** with no extra matrix used.
-----------------------------------------------------------------
