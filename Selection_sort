/*
🔹 Approach (Selection Sort):
In each iteration, find the minimum element from the unsorted part and place it
at the begining by swapping with the current index.

🔹 Time Complexity:
- Worst Case: O(n²)
- Average: O(n²)
- Best Case: O(n²)

🔹 Space Complexity: 
O(1)  (in-place)

🔹 Stable: ❌ No (can swap non-adjacent elements)
*/

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for(int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for(int j = i + 1; j < n; j++) {
            if(arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}
