/**
--------------------------------------------------------------------
âœ… Problem: Path Sum (LeetCode #112)

Given the `root` of a binary tree and an integer `targetSum`,
return `true` if the tree has a **root-to-leaf path** such that
adding up all the values along the path equals `targetSum`.

A **leaf** is a node with no children.

--------------------------------------------------------------------
Example:
Input:
      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1

targetSum = 22

Output: true  
Explanation: Path â†’ 5 â†’ 4 â†’ 11 â†’ 2 = 22

--------------------------------------------------------------------
âœ… Approach: DFS (Recursive Traversal)

ðŸ’¡ **Idea:**
We traverse the tree using Depth-First Search, maintaining a
running sum of the path.

- When reaching a leaf node, check if `sum + node->val == targetSum`.
- Return `true` as soon as a valid path is found.

--------------------------------------------------------------------
âœ… Implementation:
*/

class Solution {
public:
    // Helper function for recursive DFS
    bool helper(TreeNode* root, int targetSum, int sum) {
        // Base case: if leaf node
        if (root->left == NULL && root->right == NULL)
            return (sum + root->val == targetSum);

        // Add current nodeâ€™s value to running sum
        sum += root->val;

        // Recur on left and right subtrees
        if (root->left && helper(root->left, targetSum, sum))
            return true;

        if (root->right && helper(root->right, targetSum, sum))
            return true;

        return false;
    }

    // Main function
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (root == NULL)
            return false;
        return helper(root, targetSum, 0);
    }
};

/**
--------------------------------------------------------------------
âœ… Dry Run Example:

Tree:
    5
   / \
  4   8
 /   / \
11  13  4
/  \      \
7   2      1
targetSum = 22

â†’ Path checked: 5â†’4â†’11â†’2 = 22 âœ…  
Return true.

--------------------------------------------------------------------
âœ… Time Complexity:
O(N) â€” each node visited once.

âœ… Space Complexity:
O(H) â€” recursion stack (height of tree).

âœ… Concepts Used:
- Depth-First Search (DFS)
- Backtracking
--------------------------------------------------------------------
