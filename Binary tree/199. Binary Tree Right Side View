/**
--------------------------------------------------------------------
âœ… Problem: Binary Tree Right Side View (LeetCode #199)

Given the root of a binary tree, imagine standing on the **right side**
of it. Return the values of the nodes you can see ordered from top to bottom.

--------------------------------------------------------------------
Example:
Input:
        1
       / \
      2   3
       \   \
        5   4

Output: [1, 3, 4]

Explanation:
From the right side, the visible nodes are 1 (top), 3 (middle), and 4 (bottom).

--------------------------------------------------------------------
âœ… Approach: Level Order Traversal (BFS)

ðŸ’¡ **Idea:**
We perform a **level order traversal** using a queue.
At each level, the **last node visited** is the one visible from the right.

- Push the root node into a queue.
- For each level:
  - Traverse all nodes.
  - Record the last nodeâ€™s value for that level.

--------------------------------------------------------------------
âœ… Implementation:
*/

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        if (!root) return ans;

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                TreeNode* temp = q.front();
                q.pop();

                // If it's the last node of this level, record it
                if (i == size - 1)
                    ans.push_back(temp->val);

                // Push children for next level
                if (temp->left)
                    q.push(temp->left);
                if (temp->right)
                    q.push(temp->right);
            }
        }
        return ans;
    }
};

/**
--------------------------------------------------------------------
âœ… Dry Run Example:

Tree:
        1
       / \
      2   3
       \   \
        5   4

Level 1: [1] â†’ rightmost = 1  
Level 2: [2, 3] â†’ rightmost = 3  
Level 3: [5, 4] â†’ rightmost = 4  
Result = [1, 3, 4]

--------------------------------------------------------------------
âœ… Time Complexity:
O(N) â€” each node visited once.

âœ… Space Complexity:
O(W) â€” width of the tree (max nodes in any level).

âœ… Concepts Used:
- Level Order Traversal
- Queue (BFS)
- Rightmost Element Extraction
--------------------------------------------------------------------
