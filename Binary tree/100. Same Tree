/**
--------------------------------------------------------------------
âœ… Problem: Same Tree (LeetCode #100)

Given the roots of two binary trees `p` and `q`, write a function
to check if they are identical.

Two binary trees are considered the same if they are structurally identical
and the nodes have the same values.

--------------------------------------------------------------------
Example:

Input:
p:      1          q:      1
       / \                / \
      2   3              2   3

Output: true

--------------------------------------------------------------------
âœ… Approach: Recursive DFS

ðŸ’¡ **Idea:**
- If both nodes are NULL â†’ trees are same (base case)
- If one is NULL and other isnâ€™t â†’ not same
- If both nodes are non-NULL:
  - Their values must be equal
  - Their left subtrees must be same
  - Their right subtrees must be same

--------------------------------------------------------------------
âœ… Implementation:
*/

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        // Base case: both are null â†’ identical
        if (p == NULL && q == NULL)
            return true;

        // One null and other not â†’ not identical
        if (p == NULL || q == NULL)
            return false;

        // Check current node value and recurse left/right
        if (p->val != q->val)
            return false;

        // Recursively check left and right subtrees
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};

/**
--------------------------------------------------------------------
âœ… Dry Run Example:

p:      1          q:      1
       / \                / \
      2   3              2   3

Step 1: Compare (1, 1) â†’ equal  
â†’ Recurse left: (2, 2) â†’ equal â†’ both NULL below â†’ true  
â†’ Recurse right: (3, 3) â†’ equal â†’ both NULL below â†’ true  
â†’ Final result = true âœ…

--------------------------------------------------------------------
âœ… Time Complexity:
O(N) â€” Each node is visited once.

âœ… Space Complexity:
O(H) â€” Recursive call stack (H = height of the tree).

âœ… Concepts Used:
- Recursion
- Depth-First Search (DFS)
--------------------------------------------------------------------
*/
