/**
--------------------------------------------------------------------
‚úÖ Problem: Binary Tree Level Order Traversal (LeetCode #102)

Given the root of a binary tree, return the level order traversal of its nodes' values.  
(From left to right, level by level.)

--------------------------------------------------------------------
Example:

Input:
      3
     / \
    9  20
       / \
      15  7

Output: [[3],[9,20],[15,7]]

--------------------------------------------------------------------
‚úÖ Approach: Breadth-First Search (BFS)

üí° **Idea:**
We use a queue to traverse the tree level by level:
1Ô∏è‚É£ Push the root node into the queue.  
2Ô∏è‚É£ For each level, process all nodes in the queue:  
   - Store their values in a temporary vector.  
   - Push their children (left and right) into the queue.  
3Ô∏è‚É£ After processing each level, push the temporary vector into the result.

--------------------------------------------------------------------
‚úÖ Implementation:
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;

        if (!root) 
            return result;   // Base case: empty tree

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();        // Number of nodes at current level
            vector<int> level;          // Store values for current level

            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();

                level.push_back(node->val);

                // Push left and right children if they exist
                if (node->left)  q.push(node->left);
                if (node->right) q.push(node->right);
            }

            result.push_back(level);    // Add current level to result
        }

        return result;
    }
};

/**
--------------------------------------------------------------------
‚úÖ Dry Run Example:

Input Tree:
      3
     / \
    9  20
       / \
      15  7

Queue evolution:
Level 1: [3]          ‚Üí output [3]
Level 2: [9, 20]      ‚Üí output [9, 20]
Level 3: [15, 7]      ‚Üí output [15, 7]

Final Output:
[[3], [9, 20], [15, 7]]

--------------------------------------------------------------------
‚úÖ Time Complexity:
O(N) ‚Äî each node is visited exactly once.

‚úÖ Space Complexity:
O(N) ‚Äî space used by the queue (in the worst case, last level of tree).

‚úÖ Concepts Used:
- Breadth-First Search (BFS)
- Level Order Traversal
--------------------------------------------------------------------
*/
