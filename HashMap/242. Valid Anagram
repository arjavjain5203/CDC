/**
--------------------------------------------------------------------
✅ Problem: Valid Anagram (LeetCode #242)

Given two strings `s` and `t`, return **true** if `t` is an anagram of `s`, and **false** otherwise.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, 
typically using all the original letters exactly once.

--------------------------------------------------------------------
✅ Approach: Character Frequency Count (Using Array)

💡 **Idea:**
- If both strings are not of the same length → not anagrams.
- Create a frequency array of size 26 (for lowercase English letters).
- Traverse both strings simultaneously:
  - Increment frequency for characters in `s`.
  - Decrement frequency for characters in `t`.
- If all counts are zero → both strings have identical characters in equal quantities → return true.

--------------------------------------------------------------------
✅ Implementation:
*/

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;

        vector<int> count(26, 0);

        for (int i = 0; i < s.size(); i++) {
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }

        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) return false;
        }

        return true;
    }
};

/**
--------------------------------------------------------------------
✅ Dry Run Example:

Input:
s = "anagram"
t = "nagaram"

Step-by-step:
1️⃣ Initialize count[26] = {0}
2️⃣ Traverse both strings:
    s[i] → increment → {'a': +3, 'n': +1, 'g': +1, 'r': +1, 'm': +1}
    t[i] → decrement → same characters, so counts become zero
3️⃣ After loop → all counts = 0 → return true ✅

Output:
true

--------------------------------------------------------------------
✅ Time Complexity:
O(n) — single pass over both strings

✅ Space Complexity:
O(1) — fixed size array of 26 (constant extra space)

✅ Concepts Used:
- Hashing
- Frequency Counting
- Character Arrays
--------------------------------------------------------------------
