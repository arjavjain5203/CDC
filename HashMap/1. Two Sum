/**
------------------------------------------------------------
✅ Problem: Two Sum (LeetCode #1)
Given an array of integers `nums` and an integer `target`,
return indices of the two numbers such that they add up to `target`.

------------------------------------------------------------
✅ Approach: Hash Map (O(n) Solution)
💡 Intuition:
As we iterate over `nums`, we check if the "complement"
(target - nums[i]) exists in our hash map.
If it does — we found our pair.
If not — we store nums[i] with its index in the map.

------------------------------------------------------------
*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> seen;  // stores {value : index}

        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];

            // ✅ Check if complement is already seen
            if (seen.find(complement) != seen.end()) {
                return {seen[complement], i};  // found the pair
            }

            // ❌ Not found → store the current value
            seen[nums[i]] = i;
        }

        return {}; // if no valid pair found
    }
};
