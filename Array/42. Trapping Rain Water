/**
--------------------------------------------------------------------
✅ Problem: Trapping Rain Water

You are given `n` non-negative integers representing an elevation map  
where the width of each bar is 1.  

Compute how much water it is able to trap **after raining**.

--------------------------------------------------------------------
Example:
Input:  height = [4,2,0,3,2,5]  
Output: 9  
Explanation:  
Water trapped = (4-2) + (4-0) + (4-3) + (4-2) + (5-5) = 9

--------------------------------------------------------------------
✅ Approach: Two Pointer Technique

💡 **Idea:**
- Water trapped at any point depends on the **minimum of the highest bar on the left and right**.
- Instead of precomputing, we maintain:
  - `lmax`: highest bar from the left
  - `rmax`: highest bar from the right

📘 Algorithm:
1️⃣ Initialize two pointers — `i = 0` and `j = n-1`.  
2️⃣ Move the pointer with the **smaller height** inward.
3️⃣ Update the respective `lmax` or `rmax`.  
4️⃣ Add trapped water = (min(lmax, rmax) - height[current]) for each step.  
5️⃣ Continue until `i >= j`.

--------------------------------------------------------------------
✅ Implementation:
*/

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int i = 0, j = height.size() - 1;
        int lmax = 0, rmax = 0;

        while (i < j) {
            if (height[i] < height[j]) {
                lmax = max(lmax, height[i]);
                ans += lmax - height[i];
                i++;
            } else {
                rmax = max(rmax, height[j]);
                ans += rmax - height[j];
                j--;
            }
        }

        return ans;
    }
};

/**
--------------------------------------------------------------------
✅ Dry Run Example:

height = [4,2,0,3,2,5]

Step-by-step:
i=0, j=5 → lmax=4, rmax=5  
→ Move left pointer since height[i]<height[j]

At i=1 → lmax=4 → trapped = 4-2 = 2  
At i=2 → lmax=4 → trapped = 4-0 = 4  
At i=3 → lmax=4 → trapped = 4-3 = 1  
At i=4 → lmax=4 → trapped = 4-2 = 2  
Total = 2+4+1+2 = 9 ✅

--------------------------------------------------------------------
✅ Time Complexity: O(n)
✅ Space Complexity: O(1)

✅ Concept Used:
- Two Pointer Technique
- Dynamic left/right maximums

✅ Edge Cases:
- Empty array or single bar → 0
- Monotonic increasing/decreasing heights → 0

--------------------------------------------------------------------
*/
