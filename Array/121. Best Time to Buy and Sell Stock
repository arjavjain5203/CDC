/**
--------------------------------------------------------------------
‚úÖ Problem: Best Time to Buy and Sell Stock

You are given an array `prices[]` where `prices[i]` is the price of a stock on the `i-th` day.  
You want to maximize your profit by choosing a **single day to buy** one stock and a **different day to sell** that stock.

Return the **maximum profit** you can achieve.  
If no profit can be made, return `0`.

--------------------------------------------------------------------
Example:
Input:  prices = [7, 1, 5, 3, 6, 4]  
Output: 5  

Explanation:
Buy on day 2 (price = 1) and sell on day 5 (price = 6).  
Profit = 6 - 1 = 5.

--------------------------------------------------------------------
‚úÖ Approach: One Pass (Track Minimum Price)

üí° **Idea:**
1Ô∏è‚É£ Keep track of the **minimum price** seen so far while traversing the array.  
2Ô∏è‚É£ At each day‚Äôs price, calculate the **potential profit** = `price - minPrice`.  
3Ô∏è‚É£ Update `maxProfit` whenever a larger profit is found.  

This ensures we only buy before we sell ‚Äî all in a single pass.

--------------------------------------------------------------------
‚úÖ Implementation:
*/

#include <vector>
#include <climits>
using namespace std;

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX;  // Minimum price seen so far
        int maxProfit = 0;       // Maximum profit achievable

        for (int price : prices) {
            // Update minimum price if current price is smaller
            if (price < minPrice) {
                minPrice = price;
            }
            // Calculate and update max profit if better
            else if (price - minPrice > maxProfit) {
                maxProfit = price - minPrice;
            }
        }

        return maxProfit;
    }
};

/**
--------------------------------------------------------------------
‚úÖ Dry Run Example:

Input: prices = [7, 1, 5, 3, 6, 4]

Step-by-step:
Day 1: price=7 ‚Üí min=7 ‚Üí profit=0  
Day 2: price=1 ‚Üí min=1 ‚Üí profit=0  
Day 3: price=5 ‚Üí profit=5-1=4 ‚Üí maxProfit=4  
Day 4: price=3 ‚Üí profit=3-1=2 ‚Üí no update  
Day 5: price=6 ‚Üí profit=6-1=5 ‚Üí maxProfit=5  
Day 6: price=4 ‚Üí profit=4-1=3 ‚Üí no update  

Output ‚Üí 5

--------------------------------------------------------------------
‚úÖ Time Complexity:
O(n)  
‚Üí Single traversal of the array.

‚úÖ Space Complexity:
O(1)  
‚Üí Only uses a few variables.

‚úÖ Concept Used:
- Kadane-like single-pass optimization
- Greedy tracking of min and max differences

‚úÖ Edge Cases:
- All prices decreasing ‚Üí return 0
- Single day ‚Üí return 0
- Multiple same prices ‚Üí handled naturally

--------------------------------------------------------------------
*/
